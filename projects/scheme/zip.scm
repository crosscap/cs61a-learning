(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))

;; zip a series of lists
;; (zip '((1 2) (3 4) (5 6)))
;; ((1 3 5) (2 4 6))
;; (zip '((1 2 3) (3 4 5) (6 7 8)))
;; ((1 3 6) (2 4 7) (3 6 9))
;; (zip '((1 2 3) (3 4) (6 7 8)))
;; ((1 3 6) (2 4 7))
(define (zip lists)
  (define (have-empty lists)
    (cond ((eq? lists nil) #f)
          ((eq? (car lists) nil) #t)
          (else (have-empty (cdr lists)))))
  (define (zip-first pairs)
    (define (helper pairs first second)
      (if (eq? pairs nil)
          (list first second)
          (helper (cdr pairs)
                  (append first (list (caar pairs)))
                  (append second (list (cdar pairs))))))
    (helper pairs nil nil))
  (cond ((eq? lists nil) nil)
        ((have-empty lists) nil)
        (else (let ((ziped (zip-first lists)))
                (cons (car ziped) (zip (cadr ziped))))))
  )
